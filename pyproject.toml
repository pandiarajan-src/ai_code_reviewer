[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-code-reviewer"
version = "1.0.0"
description = "AI-powered code review agent for Bitbucket Enterprise Server"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "AI Code Reviewer Team"}
]
keywords = ["ai", "code-review", "bitbucket", "llm", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Version Control",
]

dependencies = [
    "annotated-types==0.7.0",
    "anyio==3.7.1",
    "certifi==2025.8.3",
    "charset-normalizer==3.4.3",
    "click==8.3.0",
    "dnspython==2.8.0",
    "email-validator==2.3.0",
    "fastapi==0.104.1",
    "h11==0.16.0",
    "httpcore==1.0.9",
    "httptools==0.6.4",
    "httpx==0.25.2",
    "idna==3.10",
    "itsdangerous==2.2.0",
    "Jinja2==3.1.6",
    "MarkupSafe==3.0.2",
    "orjson==3.11.3",
    "packaging==25.0",
    "pydantic==2.11.9",
    "pydantic-extra-types==2.10.5",
    "pydantic-settings==2.10.1",
    "pydantic_core==2.33.2",
    "python-dotenv==1.0.0",
    "python-multipart==0.0.20",
    "PyYAML==6.0.2",
    "requests==2.31.0",
    "sniffio==1.3.1",
    "starlette==0.27.0",
    "typing-inspection==0.4.1",
    "typing_extensions==4.15.0",
    "ujson==5.11.0",
    "urllib3==2.5.0",
    "uvicorn==0.24.0",
    "watchfiles==1.1.0",
    "websockets==15.0.1",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    "coverage==7.10.6",

    # Linting and formatting
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",

    # Additional development tools
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]

test = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    "coverage==7.10.6",
]

lint = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
]

docker = [
    "gunicorn>=21.0.0",
]

all = [
    "ai-code-reviewer[dev,test,lint,docker]"
]

[project.urls]
Homepage = "https://github.com/your-org/ai-code-reviewer"
Repository = "https://github.com/your-org/ai-code-reviewer.git"
Issues = "https://github.com/your-org/ai-code-reviewer/issues"

[project.scripts]
ai-code-reviewer = "ai_code_reviewer.main:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["ai_code_reviewer*"]
exclude = ["tests*", "htmlcov*", "__pycache__*"]

[tool.ruff]
# Python version
target-version = "py312"

# Exclude directories
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    "htmlcov",
    "build",
    "dist",
    ".venv",
    "venv",
]

# Line length (match black)
line-length = 120

# Fix settings
fix = true
show-fixes = true

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "SIM", # flake8-simplify
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by black)
    "S101",  # Use of assert (common in tests)
    "T201",  # Print statements (useful for debugging)
    "S608",  # Possible SQL injection (false positives)
    "S104",  # Binding to all interfaces (needed for development server)
    "S501",  # SSL verification disabled (needed for self-signed certs in enterprise)
    "S602",  # Shell command (needed for test runner)
    "N815",  # Mixed case variables (needed for webhook payload compatibility)
    "B904",  # Exception chaining (acceptable for HTTP error responses)
]

[tool.ruff.lint.per-file-ignores]
# Tests can use more flexible rules
"tests/*" = ["S101", "S105", "S106", "S108"]  # Allow asserts and hardcoded passwords in tests
"run_tests.py" = ["S105"]  # Allow hardcoded test passwords
"conftest.py" = ["S105"]  # Allow hardcoded test passwords

[tool.ruff.lint.isort]
# Import sorting configuration
force-single-line = false
lines-after-imports = 2

[tool.black]
# Black configuration
line-length = 120
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.git
  | __pycache__
  | \.pytest_cache
  | htmlcov
  | build
  | dist
)/
'''

[tool.mypy]
# MyPy configuration
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Third-party libraries without type stubs
[[tool.mypy.overrides]]
module = [
    "httpx.*",
    "uvicorn.*",
    "pytest.*",
    "fastapi.*",
    "pydantic.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Pytest configuration
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
    "-v"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

[tool.coverage.run]
# Coverage configuration
source = ["src"]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/site-packages/*",
    "__pycache__/*",
    "htmlcov/*",
    "build/*",
    "dist/*",
    "scripts/*",
]
branch = true

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"